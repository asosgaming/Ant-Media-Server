#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Io

module Antmedia

module Rest

  # (no documentation provided)
  class Result 

    # Gives information about the operation.
    # If it is true, operation is successfull
    # if it is false, operation is failed
    attr_accessor :success
    # Message may be filled when error happens so that developer may
    # understand what the problem is
    attr_accessor :message

    # the json hash for this Result
    def to_jaxb_json_hash
      _h = {}
      _h['success'] = success.to_jaxb_json_hash unless success.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      return _h
    end

    # the json (string form) for this Result
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Result with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['success'].nil?
          _oa = _o['success']
            if(_oa.is_a? Hash)
              @success = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @success =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @success = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @success.push Boolean.from_json(_item)
                 else
                   @success.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @success = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
    end

    # constructs a Result from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Io

module Antmedia

module Datastore

module Db

module Types

  # (no documentation provided)
  class SocialEndpointChannel 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this SocialEndpointChannel
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this SocialEndpointChannel
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SocialEndpointChannel with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a SocialEndpointChannel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Io

module Antmedia

module Datastore

module Db

module Types

  # (no documentation provided)
  class Endpoint 

    # (no documentation provided)
    attr_accessor :streamId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :broadcastId
    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :rtmpUrl

    # the json hash for this Endpoint
    def to_jaxb_json_hash
      _h = {}
      _h['streamId'] = streamId.to_jaxb_json_hash unless streamId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['broadcastId'] = broadcastId.to_jaxb_json_hash unless broadcastId.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['rtmpUrl'] = rtmpUrl.to_jaxb_json_hash unless rtmpUrl.nil?
      return _h
    end

    # the json (string form) for this Endpoint
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Endpoint with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['streamId'].nil?
          _oa = _o['streamId']
            if(_oa.is_a? Hash)
              @streamId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @streamId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @streamId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @streamId.push String.from_json(_item)
                 else
                   @streamId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @streamId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['broadcastId'].nil?
          _oa = _o['broadcastId']
            if(_oa.is_a? Hash)
              @broadcastId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @broadcastId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @broadcastId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @broadcastId.push String.from_json(_item)
                 else
                   @broadcastId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @broadcastId = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['rtmpUrl'].nil?
          _oa = _o['rtmpUrl']
            if(_oa.is_a? Hash)
              @rtmpUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rtmpUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rtmpUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rtmpUrl.push String.from_json(_item)
                 else
                   @rtmpUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rtmpUrl = _oa
            end
          end
    end

    # constructs a Endpoint from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Io

module Antmedia

module Datastore

module Db

module Types

  # (no documentation provided)
  class Broadcast 

    # (no documentation provided)
    attr_accessor :publicStream
    # (no documentation provided)
    attr_accessor :duration
    # (no documentation provided)
    attr_accessor :date
    # (no documentation provided)
    attr_accessor :category
    # (no documentation provided)
    attr_accessor :streamId
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :expireDurationMS
    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :is360
    # (no documentation provided)
    attr_accessor :endPointList
    # (no documentation provided)
    attr_accessor :plannedStartDate
    # (no documentation provided)
    attr_accessor :publish
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :listenerHookURL

    # the json hash for this Broadcast
    def to_jaxb_json_hash
      _h = {}
      _h['publicStream'] = publicStream.to_jaxb_json_hash unless publicStream.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['category'] = category.to_jaxb_json_hash unless category.nil?
      _h['streamId'] = streamId.to_jaxb_json_hash unless streamId.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['expireDurationMS'] = expireDurationMS.to_jaxb_json_hash unless expireDurationMS.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['is360'] = is360.to_jaxb_json_hash unless is360.nil?
      if !endPointList.nil?
        _ha = Array.new
        endPointList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['endPointList'] = _ha
      end
      _h['plannedStartDate'] = plannedStartDate.to_jaxb_json_hash unless plannedStartDate.nil?
      _h['publish'] = publish.to_jaxb_json_hash unless publish.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['listenerHookURL'] = listenerHookURL.to_jaxb_json_hash unless listenerHookURL.nil?
      return _h
    end

    # the json (string form) for this Broadcast
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Broadcast with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['publicStream'].nil?
          _oa = _o['publicStream']
            if(_oa.is_a? Hash)
              @publicStream = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicStream =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicStream = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicStream.push Boolean.from_json(_item)
                 else
                   @publicStream.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicStream = _oa
            end
          end
        if !_o['duration'].nil?
          _oa = _o['duration']
            if(_oa.is_a? Hash)
              @duration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @duration =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @duration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @duration.push Bignum.from_json(_item)
                 else
                   @duration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @duration = _oa
            end
          end
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Bignum.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['category'].nil?
          _oa = _o['category']
            if(_oa.is_a? Hash)
              @category = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @category =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @category = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @category.push String.from_json(_item)
                 else
                   @category.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @category = _oa
            end
          end
        if !_o['streamId'].nil?
          _oa = _o['streamId']
            if(_oa.is_a? Hash)
              @streamId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @streamId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @streamId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @streamId.push String.from_json(_item)
                 else
                   @streamId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @streamId = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['expireDurationMS'].nil?
          _oa = _o['expireDurationMS']
            if(_oa.is_a? Hash)
              @expireDurationMS = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expireDurationMS =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expireDurationMS = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expireDurationMS.push Fixnum.from_json(_item)
                 else
                   @expireDurationMS.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expireDurationMS = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['is360'].nil?
          _oa = _o['is360']
            if(_oa.is_a? Hash)
              @is360 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @is360 =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @is360 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @is360.push Boolean.from_json(_item)
                 else
                   @is360.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @is360 = _oa
            end
          end
        if !_o['endPointList'].nil?
          _oa = _o['endPointList']
            if(_oa.is_a? Hash)
              @endPointList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endPointList =  Io::Antmedia::Datastore::Db::Types::Endpoint.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endPointList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endPointList.push Io::Antmedia::Datastore::Db::Types::Endpoint.from_json(_item)
                 else
                   @endPointList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endPointList = _oa
            end
          end
        if !_o['plannedStartDate'].nil?
          _oa = _o['plannedStartDate']
            if(_oa.is_a? Hash)
              @plannedStartDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @plannedStartDate =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @plannedStartDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @plannedStartDate.push Bignum.from_json(_item)
                 else
                   @plannedStartDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @plannedStartDate = _oa
            end
          end
        if !_o['publish'].nil?
          _oa = _o['publish']
            if(_oa.is_a? Hash)
              @publish = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publish =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publish = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publish.push Boolean.from_json(_item)
                 else
                   @publish.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publish = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['listenerHookURL'].nil?
          _oa = _o['listenerHookURL']
            if(_oa.is_a? Hash)
              @listenerHookURL = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listenerHookURL =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listenerHookURL = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listenerHookURL.push String.from_json(_item)
                 else
                   @listenerHookURL.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listenerHookURL = _oa
            end
          end
    end

    # constructs a Broadcast from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Io

module Antmedia

module Datastore

module Db

module Types

  # (no documentation provided)
  class Broadcast 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :publish
    # (no documentation provided)
    attr_accessor :endPointList
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :category
    # (no documentation provided)
    attr_accessor :publicStream
    # (no documentation provided)
    attr_accessor :expireDurationMS
    # (no documentation provided)
    attr_accessor :duration
    # (no documentation provided)
    attr_accessor :is360
    # (no documentation provided)
    attr_accessor :listenerHookURL
    # (no documentation provided)
    attr_accessor :date
    # (no documentation provided)
    attr_accessor :plannedStartDate
    # (no documentation provided)
    attr_accessor :streamId

    # the json hash for this Broadcast
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['publish'] = publish.to_jaxb_json_hash unless publish.nil?
      if !endPointList.nil?
        _ha = Array.new
        endPointList.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['endPointList'] = _ha
      end
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['category'] = category.to_jaxb_json_hash unless category.nil?
      _h['publicStream'] = publicStream.to_jaxb_json_hash unless publicStream.nil?
      _h['expireDurationMS'] = expireDurationMS.to_jaxb_json_hash unless expireDurationMS.nil?
      _h['duration'] = duration.to_jaxb_json_hash unless duration.nil?
      _h['is360'] = is360.to_jaxb_json_hash unless is360.nil?
      _h['listenerHookURL'] = listenerHookURL.to_jaxb_json_hash unless listenerHookURL.nil?
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['plannedStartDate'] = plannedStartDate.to_jaxb_json_hash unless plannedStartDate.nil?
      _h['streamId'] = streamId.to_jaxb_json_hash unless streamId.nil?
      return _h
    end

    # the json (string form) for this Broadcast
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Broadcast with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['publish'].nil?
          _oa = _o['publish']
            if(_oa.is_a? Hash)
              @publish = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publish =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publish = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publish.push Boolean.from_json(_item)
                 else
                   @publish.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publish = _oa
            end
          end
        if !_o['endPointList'].nil?
          _oa = _o['endPointList']
            if(_oa.is_a? Hash)
              @endPointList = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endPointList =  Io::Antmedia::Datastore::Db::Types::Endpoint.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endPointList = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endPointList.push Io::Antmedia::Datastore::Db::Types::Endpoint.from_json(_item)
                 else
                   @endPointList.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endPointList = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['category'].nil?
          _oa = _o['category']
            if(_oa.is_a? Hash)
              @category = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @category =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @category = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @category.push String.from_json(_item)
                 else
                   @category.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @category = _oa
            end
          end
        if !_o['publicStream'].nil?
          _oa = _o['publicStream']
            if(_oa.is_a? Hash)
              @publicStream = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicStream =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicStream = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicStream.push Boolean.from_json(_item)
                 else
                   @publicStream.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicStream = _oa
            end
          end
        if !_o['expireDurationMS'].nil?
          _oa = _o['expireDurationMS']
            if(_oa.is_a? Hash)
              @expireDurationMS = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expireDurationMS =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expireDurationMS = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expireDurationMS.push Fixnum.from_json(_item)
                 else
                   @expireDurationMS.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expireDurationMS = _oa
            end
          end
        if !_o['duration'].nil?
          _oa = _o['duration']
            if(_oa.is_a? Hash)
              @duration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @duration =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @duration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @duration.push Bignum.from_json(_item)
                 else
                   @duration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @duration = _oa
            end
          end
        if !_o['is360'].nil?
          _oa = _o['is360']
            if(_oa.is_a? Hash)
              @is360 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @is360 =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @is360 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @is360.push Boolean.from_json(_item)
                 else
                   @is360.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @is360 = _oa
            end
          end
        if !_o['listenerHookURL'].nil?
          _oa = _o['listenerHookURL']
            if(_oa.is_a? Hash)
              @listenerHookURL = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @listenerHookURL =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @listenerHookURL = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @listenerHookURL.push String.from_json(_item)
                 else
                   @listenerHookURL.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @listenerHookURL = _oa
            end
          end
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Bignum.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['plannedStartDate'].nil?
          _oa = _o['plannedStartDate']
            if(_oa.is_a? Hash)
              @plannedStartDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @plannedStartDate =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @plannedStartDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @plannedStartDate.push Bignum.from_json(_item)
                 else
                   @plannedStartDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @plannedStartDate = _oa
            end
          end
        if !_o['streamId'].nil?
          _oa = _o['streamId']
            if(_oa.is_a? Hash)
              @streamId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @streamId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @streamId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @streamId.push String.from_json(_item)
                 else
                   @streamId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @streamId = _oa
            end
          end
    end

    # constructs a Broadcast from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Io

module Antmedia

module Datastore

module Db

module Types

  # (no documentation provided)
  class Endpoint 

    # (no documentation provided)
    attr_accessor :rtmpUrl
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :streamId
    # (no documentation provided)
    attr_accessor :broadcastId
    # (no documentation provided)
    attr_accessor :type

    # the json hash for this Endpoint
    def to_jaxb_json_hash
      _h = {}
      _h['rtmpUrl'] = rtmpUrl.to_jaxb_json_hash unless rtmpUrl.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['streamId'] = streamId.to_jaxb_json_hash unless streamId.nil?
      _h['broadcastId'] = broadcastId.to_jaxb_json_hash unless broadcastId.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      return _h
    end

    # the json (string form) for this Endpoint
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Endpoint with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['rtmpUrl'].nil?
          _oa = _o['rtmpUrl']
            if(_oa.is_a? Hash)
              @rtmpUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rtmpUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rtmpUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rtmpUrl.push String.from_json(_item)
                 else
                   @rtmpUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rtmpUrl = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['streamId'].nil?
          _oa = _o['streamId']
            if(_oa.is_a? Hash)
              @streamId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @streamId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @streamId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @streamId.push String.from_json(_item)
                 else
                   @streamId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @streamId = _oa
            end
          end
        if !_o['broadcastId'].nil?
          _oa = _o['broadcastId']
            if(_oa.is_a? Hash)
              @broadcastId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @broadcastId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @broadcastId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @broadcastId.push String.from_json(_item)
                 else
                   @broadcastId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @broadcastId = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
    end

    # constructs a Endpoint from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Io

module Antmedia

module Rest

  # (no documentation provided)
  class Result 

    # Gives information about the operation.
    # If it is true, operation is successfull
    # if it is false, operation is failed
    attr_accessor :success
    # Message may be filled when error happens so that developer may
    # understand what the problem is
    attr_accessor :message

    # the json hash for this Result
    def to_jaxb_json_hash
      _h = {}
      _h['success'] = success.to_jaxb_json_hash unless success.nil?
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      return _h
    end

    # the json (string form) for this Result
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Result with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['success'].nil?
          _oa = _o['success']
            if(_oa.is_a? Hash)
              @success = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @success =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @success = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @success.push Boolean.from_json(_item)
                 else
                   @success.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @success = _oa
            end
          end
        if !_o['message'].nil?
          _oa = _o['message']
            if(_oa.is_a? Hash)
              @message = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @message =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @message = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @message.push String.from_json(_item)
                 else
                   @message.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @message = _oa
            end
          end
    end

    # constructs a Result from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

module Io

module Antmedia

module Datastore

module Db

module Types

  # (no documentation provided)
  class SocialEndpointChannel 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this SocialEndpointChannel
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this SocialEndpointChannel
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SocialEndpointChannel with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a SocialEndpointChannel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end
